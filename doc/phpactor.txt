*phpactor* *phpactor.txt* PHP completion and refactoring tool

                          PHPACTOR REFERENCE MANUAL~


1. Introduction                 |phpactor-introduction|
2. Installation                 |phpactor-installation|
3. Updating                     |phpactor-updating|
4. Mappings                     |phpactor-mappings|
5. Configuration                |phpactor-configuration|
6. Requirements                 |phpactor-requirements|
7. Completion                   |phpactor-completion|
8. Completion plugins           |phpactor-completion-plugins|
9. Context Menu                 |phpactor-context-menu|

================================================================================
                                                            *phpactor-introduction*
Phpactor is a completion and refactoring tool for PHP. This help file
documents the VIM plugin. To see _all_ of the documentation, visit the
website:

    https://phpactor.github.io/phpactor/

================================================================================
                                                            *phpactor-installation*
Install Phpactor using your favorite VIM package manager.
If you don't use any, I recommend vim-plug.
Add the plugin to your .vimrc:

`Plug 'phpactor/phpactor', {'for': 'php', 'do': composer install'}`

Then in VIM:
`:PlugInstall`

If you do not use vim-plug, you will need to install the Phpactor dependencies with composer manually:
`$ cd ~/.vim/bundle/phpactor`
`$ composer install`

Now issue the following command
`:call phpactor#Status():`

Support
-------
[✔] Composer detected - faster class location and more features!
[✔] Git detected - enables faster refactorings in your repository scope!

Config files
------------
[✔] /home/daniel/www/phpactor/phpactor/.phpactor.yml
[✔] /home/daniel/.config/phpactor/phpactor.yml
[✘] /etc/xdg/phpactor/phpactor.yml

Phpactor works best with Composer - but much functionality
including auto-completion can still work (sometimes slowly depending on project size).

================================================================================
UPDATING                                                      *phpactor-updating*

Updating Phpactor from VIM is easy:

`:call phpactor#Update()`

Note that if the update included changes to the VIM plugin you will currently need
to either re-source (`:source ~/path/to/phpactor/plugin/phpactor.vim`) the plugin
or reload VIM.

================================================================================
MAPPINGS                                                  *phpactor-mappings*

The Phpactor plugin will not automatically assume any shortcuts,
copy the following configuration into your .vimrc:

" Include use statement
`nmap <Leader>u :call phpactor#UseAdd()<CR>`

" Invoke the context menu
`nmap <Leader>mm :call phpactor#ContextMenu()<CR>`

" Goto definition of class or class member under the cursor
`nmap <Leader>o :call phpactor#GotoDefinition()<CR>`

" Transform the classes in the current file
`nmap <Leader>tt :call phpactor#Transform()<CR>`

" Generate a new class (replacing the current file)
`nmap <Leader>cc :call phpactor#ClassNew()<CR>`

" Extract method from selection
`vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>`

See the Refactorings chapter for more functions you can map shortcuts to.

================================================================================
CONFIGURATION                                            *phpactor-configuration*

The plugin has some configuration options:

- `g:phpactorPhpBin`: PHP executable to use.
- `g:phpactorBranch`: Phpactor branch (default is `master`, use `develop` for
  bleeding edge).
- `g:phpactorOmniError`: Set to `v:true` to enable useful error messages when
  completion is invoked.

================================================================================
REQUIREMENTS                                               *phpactor-requirements*
Phpactor requires at least PHP 7.0. If you use a different version of PHP locally,
you may need to target a new version of PHP - add the following to your .vimrc to change the PHP binary:

`let g:phpactorPhpBin = "/usr/bin/local/php6.0"`

================================================================================
COMPLETION                                                   *phpactor-completion*

Omni-completion is VIM's built-in auto-completion mechanism.

Add the following to your .vimrc in order to use Phpactor for omni-completion (for PHP files):
`autocmd FileType php setlocal omnifunc=phpactor#Complete`

To invoke omni complete in insert mode <C-x><C-o> (ctrl-x then ctrl-o). See :help compl-omni.

The Omni-Complete method provides feedback messages when it cannot complete something.
This information is useful. Other completion mehanisms may not provide this information.

Always enable omni-completion. If another mechanism is failing to complete,
invoke omni-complete to find out why.

================================================================================
COMPLETION PLUGINS                                *phpactor-completion-plugins*

Several asynchronous completion frameworks support Phpactor

                                                              *phpactor-deoplete*
To use Phpactor with deoplete.nvim add this to your vimrc/init.vim:
`Plug 'Shougo/deoplete.nvim'`
`Plug 'phpactor/phpactor', { 'do': 'composer install', 'for': ['php'] }`
`Plug 'kristijanhusak/deoplete-phpactor'`

Run `PlugInstall` and you're good to go!

                                                *phpactor-neovim-completion-manager*
To use Phpactor with Neovim Completion manager add this to your vimrc/init.vim:
`Plug 'roxma/nvim-completion-manager'`
`Plug 'phpactor/phpactor', { 'do': 'composer install', 'for': ['php'] }`
`Plug 'roxma/ncm-phpactor'`

Run `PlugInstall` and you're good to go!

================================================================================
CONTEXT MENU                                               *phpactor-context-menu*

The context menu is the main point of contact with Phpactor.
Invoke it on any class, member, variable, method call, or anything really.

If you move over a method and invoke the context menu with
`:call phpactor#ContextMenu()`

You should see something like the following:

`Method "execute":`
`[r]eplace_references, (f)ind_references, (g)enerate_method, g(o)to_definition:`

--------------------------------------------------------------------------------
vim:tw=78:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:ft=help:norl:
