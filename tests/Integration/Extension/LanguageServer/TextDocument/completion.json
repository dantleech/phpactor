[{
    "jsonrpc": "2.0",
    "method": "textDocument\/didOpen",
    "params": {
        "textDocument": {
            "languageId": "php",
            "text": "<?php\n\nnamespace Phpactor;\n\n\nuse Symfony\\Component\\Console\\Application as SymfonyApplication;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Phpactor\\Container\\Container;\nuse Monolog\\Handler\\StreamHandler;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse PackageVersions\\Versions;\n\nclass Application extends SymfonyApplication\n{\n    \/**\n     * @var Container\n     *\/\n    private $container;\n\n    \/**\n     * @var string\n     *\/\n    private $vendorDir;\n\n    public function __construct(string $vendorDir)\n    {\n        parent::__construct('Phpactor', Versions::getVersion('phpactor\/phpactor'));\n        $this->vendorDir = $vendorDir;\n        \n    }\n\n    public function doRun(InputInterface $input, OutputInterface $output)\n    {\n        $this->initialize($input);\n        $this->setCatchExceptions(false);\n\n        if ($output->isVerbose()) {\n            $this->container->get('monolog.logger')->pushHandler(new StreamHandler(STDERR));\n        }\n\n        $formatter = $output->getFormatter();\n        $formatter->setStyle('highlight', new OutputFormatterStyle('red', null, [ 'bold' ]));\n        $formatter->setStyle('diff-add', new OutputFormatterStyle('green', null, [  ]));\n        $formatter->setStyle('diff-remove', new OutputFormatterStyle('red', null, [  ]));\n\n        try {\n            return parent::doRun($input, $output);\n        } catch (\\Exception $e) {\n            if ($input->hasOption('format') && $input->getOption('format')) {\n                return $this->handleException($output, $input->getOption('format'), $e);\n            }\n\n            if ($output instanceof ConsoleOutputInterface) {\n                $this->renderException($e, $output->getErrorOutput());\n            }\n\n            return 255;\n        }\n    }\n\n    protected function getDefaultInputDefinition()\n    {\n        $definition = parent::getDefaultInputDefinition();\n        $definition->addOption(new InputOption('working-dir', 'd', InputOption::VALUE_REQUIRED, 'Working directory'));\n\n        return $definition;\n    }\n\n    private function handleException(OutputInterface $output, string $dumper, \\Exception $e)\n    {\n        $errors = [\n            'error' => $this->serializeException($e),\n            'previous' => [\n            ],\n        ];\n\n        while ($e = $e->getPrevious()) {\n            $errors['previous'][] = $this->serializeException($e);\n        }\n\n        $this->container->get('console.dumper_registry')->get($dumper)->dump($output, $errors);\n\n        return 64;\n    }\n\n    private function serializeException(\\Exception $e)\n    {\n        return [\n            'class' => get_class($e),\n            'code' => $e->getCode(),\n            'message' => $e->getMessage(),\n        ];\n    }\n\n    private function initialize(InputInterface $input)\n    {\n        $this->container = Phpactor::boot($input, $this->vendorDir);\n\n        foreach ($this->container->getServiceIdsForTag('ui.console.command') as $commandId => $attrs) {\n            $this->add($this->container->get($commandId));\n        }\n    }\n}\n",
            "uri": "file:\/\/\/home\/daniel\/www\/phpactor\/phpactor\/lib\/Application.php",
            "version": 0
        }
    }
},{
    "jsonrpc": "2.0",
    "method": "textDocument\/didChange",
    "params": {
        "contentChanges": [
            {
                "text": "<?php\n\nnamespace Phpactor;\n\n\nuse Symfony\\Component\\Console\\Application as SymfonyApplication;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Phpactor\\Container\\Container;\nuse Monolog\\Handler\\StreamHandler;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse PackageVersions\\Versions;\n\nclass Application extends SymfonyApplication\n{\n    \/**\n     * @var Container\n     *\/\n    private $container;\n\n    \/**\n     * @var string\n     *\/\n    private $vendorDir;\n\n    public function __construct(string $vendorDir)\n    {\n        parent::__construct('Phpactor', Versions::getVersion('phpactor\/phpactor'));\n        $this->vendorDir = $vendorDir;\n        $\n    }\n\n    public function doRun(InputInterface $input, OutputInterface $output)\n    {\n        $this->initialize($input);\n        $this->setCatchExceptions(false);\n\n        if ($output->isVerbose()) {\n            $this->container->get('monolog.logger')->pushHandler(new StreamHandler(STDERR));\n        }\n\n        $formatter = $output->getFormatter();\n        $formatter->setStyle('highlight', new OutputFormatterStyle('red', null, [ 'bold' ]));\n        $formatter->setStyle('diff-add', new OutputFormatterStyle('green', null, [  ]));\n        $formatter->setStyle('diff-remove', new OutputFormatterStyle('red', null, [  ]));\n\n        try {\n            return parent::doRun($input, $output);\n        } catch (\\Exception $e) {\n            if ($input->hasOption('format') && $input->getOption('format')) {\n                return $this->handleException($output, $input->getOption('format'), $e);\n            }\n\n            if ($output instanceof ConsoleOutputInterface) {\n                $this->renderException($e, $output->getErrorOutput());\n            }\n\n            return 255;\n        }\n    }\n\n    protected function getDefaultInputDefinition()\n    {\n        $definition = parent::getDefaultInputDefinition();\n        $definition->addOption(new InputOption('working-dir', 'd', InputOption::VALUE_REQUIRED, 'Working directory'));\n\n        return $definition;\n    }\n\n    private function handleException(OutputInterface $output, string $dumper, \\Exception $e)\n    {\n        $errors = [\n            'error' => $this->serializeException($e),\n            'previous' => [\n            ],\n        ];\n\n        while ($e = $e->getPrevious()) {\n            $errors['previous'][] = $this->serializeException($e);\n        }\n\n        $this->container->get('console.dumper_registry')->get($dumper)->dump($output, $errors);\n\n        return 64;\n    }\n\n    private function serializeException(\\Exception $e)\n    {\n        return [\n            'class' => get_class($e),\n            'code' => $e->getCode(),\n            'message' => $e->getMessage(),\n        ];\n    }\n\n    private function initialize(InputInterface $input)\n    {\n        $this->container = Phpactor::boot($input, $this->vendorDir);\n\n        foreach ($this->container->getServiceIdsForTag('ui.console.command') as $commandId => $attrs) {\n            $this->add($this->container->get($commandId));\n        }\n    }\n}\n"
            }
        ],
        "textDocument": {
            "uri": "file:\/\/\/home\/daniel\/www\/phpactor\/phpactor\/lib\/Application.php",
            "version": 1
        }
    }
},{
    "jsonrpc": "2.0",
    "method": "textDocument\/didChange",
    "params": {
        "contentChanges": [
            {
                "text": "<?php\n\nnamespace Phpactor;\n\n\nuse Symfony\\Component\\Console\\Application as SymfonyApplication;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Phpactor\\Container\\Container;\nuse Monolog\\Handler\\StreamHandler;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse PackageVersions\\Versions;\n\nclass Application extends SymfonyApplication\n{\n    \/**\n     * @var Container\n     *\/\n    private $container;\n\n    \/**\n     * @var string\n     *\/\n    private $vendorDir;\n\n    public function __construct(string $vendorDir)\n    {\n        parent::__construct('Phpactor', Versions::getVersion('phpactor\/phpactor'));\n        $this->vendorDir = $vendorDir;\n        $t\n    }\n\n    public function doRun(InputInterface $input, OutputInterface $output)\n    {\n        $this->initialize($input);\n        $this->setCatchExceptions(false);\n\n        if ($output->isVerbose()) {\n            $this->container->get('monolog.logger')->pushHandler(new StreamHandler(STDERR));\n        }\n\n        $formatter = $output->getFormatter();\n        $formatter->setStyle('highlight', new OutputFormatterStyle('red', null, [ 'bold' ]));\n        $formatter->setStyle('diff-add', new OutputFormatterStyle('green', null, [  ]));\n        $formatter->setStyle('diff-remove', new OutputFormatterStyle('red', null, [  ]));\n\n        try {\n            return parent::doRun($input, $output);\n        } catch (\\Exception $e) {\n            if ($input->hasOption('format') && $input->getOption('format')) {\n                return $this->handleException($output, $input->getOption('format'), $e);\n            }\n\n            if ($output instanceof ConsoleOutputInterface) {\n                $this->renderException($e, $output->getErrorOutput());\n            }\n\n            return 255;\n        }\n    }\n\n    protected function getDefaultInputDefinition()\n    {\n        $definition = parent::getDefaultInputDefinition();\n        $definition->addOption(new InputOption('working-dir', 'd', InputOption::VALUE_REQUIRED, 'Working directory'));\n\n        return $definition;\n    }\n\n    private function handleException(OutputInterface $output, string $dumper, \\Exception $e)\n    {\n        $errors = [\n            'error' => $this->serializeException($e),\n            'previous' => [\n            ],\n        ];\n\n        while ($e = $e->getPrevious()) {\n            $errors['previous'][] = $this->serializeException($e);\n        }\n\n        $this->container->get('console.dumper_registry')->get($dumper)->dump($output, $errors);\n\n        return 64;\n    }\n\n    private function serializeException(\\Exception $e)\n    {\n        return [\n            'class' => get_class($e),\n            'code' => $e->getCode(),\n            'message' => $e->getMessage(),\n        ];\n    }\n\n    private function initialize(InputInterface $input)\n    {\n        $this->container = Phpactor::boot($input, $this->vendorDir);\n\n        foreach ($this->container->getServiceIdsForTag('ui.console.command') as $commandId => $attrs) {\n            $this->add($this->container->get($commandId));\n        }\n    }\n}\n"
            }
        ],
        "textDocument": {
            "uri": "file:\/\/\/home\/daniel\/www\/phpactor\/phpactor\/lib\/Application.php",
            "version": 2
        }
    }
}, {
    "jsonrpc": "2.0",
    "method": "textDocument\/didChange",
    "params": {
        "contentChanges": [
            {
                "text": "<?php\n\nnamespace Phpactor;\n\n\nuse Symfony\\Component\\Console\\Application as SymfonyApplication;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Phpactor\\Container\\Container;\nuse Monolog\\Handler\\StreamHandler;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse PackageVersions\\Versions;\n\nclass Application extends SymfonyApplication\n{\n    \/**\n     * @var Container\n     *\/\n    private $container;\n\n    \/**\n     * @var string\n     *\/\n    private $vendorDir;\n\n    public function __construct(string $vendorDir)\n    {\n        parent::__construct('Phpactor', Versions::getVersion('phpactor\/phpactor'));\n        $this->vendorDir = $vendorDir;\n        $this-\n    }\n\n    public function doRun(InputInterface $input, OutputInterface $output)\n    {\n        $this->initialize($input);\n        $this->setCatchExceptions(false);\n\n        if ($output->isVerbose()) {\n            $this->container->get('monolog.logger')->pushHandler(new StreamHandler(STDERR));\n        }\n\n        $formatter = $output->getFormatter();\n        $formatter->setStyle('highlight', new OutputFormatterStyle('red', null, [ 'bold' ]));\n        $formatter->setStyle('diff-add', new OutputFormatterStyle('green', null, [  ]));\n        $formatter->setStyle('diff-remove', new OutputFormatterStyle('red', null, [  ]));\n\n        try {\n            return parent::doRun($input, $output);\n        } catch (\\Exception $e) {\n            if ($input->hasOption('format') && $input->getOption('format')) {\n                return $this->handleException($output, $input->getOption('format'), $e);\n            }\n\n            if ($output instanceof ConsoleOutputInterface) {\n                $this->renderException($e, $output->getErrorOutput());\n            }\n\n            return 255;\n        }\n    }\n\n    protected function getDefaultInputDefinition()\n    {\n        $definition = parent::getDefaultInputDefinition();\n        $definition->addOption(new InputOption('working-dir', 'd', InputOption::VALUE_REQUIRED, 'Working directory'));\n\n        return $definition;\n    }\n\n    private function handleException(OutputInterface $output, string $dumper, \\Exception $e)\n    {\n        $errors = [\n            'error' => $this->serializeException($e),\n            'previous' => [\n            ],\n        ];\n\n        while ($e = $e->getPrevious()) {\n            $errors['previous'][] = $this->serializeException($e);\n        }\n\n        $this->container->get('console.dumper_registry')->get($dumper)->dump($output, $errors);\n\n        return 64;\n    }\n\n    private function serializeException(\\Exception $e)\n    {\n        return [\n            'class' => get_class($e),\n            'code' => $e->getCode(),\n            'message' => $e->getMessage(),\n        ];\n    }\n\n    private function initialize(InputInterface $input)\n    {\n        $this->container = Phpactor::boot($input, $this->vendorDir);\n\n        foreach ($this->container->getServiceIdsForTag('ui.console.command') as $commandId => $attrs) {\n            $this->add($this->container->get($commandId));\n        }\n    }\n}\n"
            }
        ],
        "textDocument": {
            "uri": "file:\/\/\/home\/daniel\/www\/phpactor\/phpactor\/lib\/Application.php",
            "version": 3
        }
    }
},{
    "jsonrpc": "2.0",
    "method": "textDocument\/didChange",
    "params": {
        "contentChanges": [
            {
                "text": "<?php\n\nnamespace Phpactor;\n\n\nuse Symfony\\Component\\Console\\Application as SymfonyApplication;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Phpactor\\Container\\Container;\nuse Monolog\\Handler\\StreamHandler;\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse PackageVersions\\Versions;\n\nclass Application extends SymfonyApplication\n{\n    \/**\n     * @var Container\n     *\/\n    private $container;\n\n    \/**\n     * @var string\n     *\/\n    private $vendorDir;\n\n    public function __construct(string $vendorDir)\n    {\n        parent::__construct('Phpactor', Versions::getVersion('phpactor\/phpactor'));\n        $this->vendorDir = $vendorDir;\n        $this->\n    }\n\n    public function doRun(InputInterface $input, OutputInterface $output)\n    {\n        $this->initialize($input);\n        $this->setCatchExceptions(false);\n\n        if ($output->isVerbose()) {\n            $this->container->get('monolog.logger')->pushHandler(new StreamHandler(STDERR));\n        }\n\n        $formatter = $output->getFormatter();\n        $formatter->setStyle('highlight', new OutputFormatterStyle('red', null, [ 'bold' ]));\n        $formatter->setStyle('diff-add', new OutputFormatterStyle('green', null, [  ]));\n        $formatter->setStyle('diff-remove', new OutputFormatterStyle('red', null, [  ]));\n\n        try {\n            return parent::doRun($input, $output);\n        } catch (\\Exception $e) {\n            if ($input->hasOption('format') && $input->getOption('format')) {\n                return $this->handleException($output, $input->getOption('format'), $e);\n            }\n\n            if ($output instanceof ConsoleOutputInterface) {\n                $this->renderException($e, $output->getErrorOutput());\n            }\n\n            return 255;\n        }\n    }\n\n    protected function getDefaultInputDefinition()\n    {\n        $definition = parent::getDefaultInputDefinition();\n        $definition->addOption(new InputOption('working-dir', 'd', InputOption::VALUE_REQUIRED, 'Working directory'));\n\n        return $definition;\n    }\n\n    private function handleException(OutputInterface $output, string $dumper, \\Exception $e)\n    {\n        $errors = [\n            'error' => $this->serializeException($e),\n            'previous' => [\n            ],\n        ];\n\n        while ($e = $e->getPrevious()) {\n            $errors['previous'][] = $this->serializeException($e);\n        }\n\n        $this->container->get('console.dumper_registry')->get($dumper)->dump($output, $errors);\n\n        return 64;\n    }\n\n    private function serializeException(\\Exception $e)\n    {\n        return [\n            'class' => get_class($e),\n            'code' => $e->getCode(),\n            'message' => $e->getMessage(),\n        ];\n    }\n\n    private function initialize(InputInterface $input)\n    {\n        $this->container = Phpactor::boot($input, $this->vendorDir);\n\n        foreach ($this->container->getServiceIdsForTag('ui.console.command') as $commandId => $attrs) {\n            $this->add($this->container->get($commandId));\n        }\n    }\n}\n"
            }
        ],
        "textDocument": {
            "uri": "file:\/\/\/home\/daniel\/www\/phpactor\/phpactor\/lib\/Application.php",
            "version": 4
        }
    }
},{
    "jsonrpc": "2.0",
    "method": "textDocument\/completion",
    "params": {
        "position": {
            "character": 15,
            "line": 31
        },
        "textDocument": {
            "uri": "file:\/\/\/home\/daniel\/www\/phpactor\/phpactor\/lib\/Application.php"
        }
    },
    "id": 18
}]
